[C/C++]
snippet_class=class ^1MyClass^\n{\npublic:\n\t^1MyClass^();\n\t~^1MyClass^();\n\nprotected:\n\nprivate:\n\n};\n
snippet_do=do\n{\n\t^0^\n} while(^1true^);
snippet_enum=enum ^1MyEnum^\n{\n\t^0^\n};\n
snippet_for=for (^1size_t^ ^2i^ = 0; ^2i^ < ^3count^; ++^2i^)\n{\n\t^0^\n}
snippet_switch=switch (^1switch_on^)\n{\n\t^0^\n\tdefault:\n\tbreak;\n}\n
snippet_try=try\n{\n\t^0^\n}\ncatch (const std::exception&)\n{\n}\n
snippet_while=while (^1true^)\n{\n\t^0^\n}

[Html]
snippet_a=a href="^1#^">^2content^</a>
snippet_base=base href="^1/^" />
snippet_form=form action="^1/^" method="^2post^">^0^</form>
snippet_html=html xmlns="http://www.w3.org/1999/xhtml">\n<head>\n\t<title>^0^</title>\n</head>\n<body>\n</body>\n</html>
snippet_iframe=iframe src="^1file.html^">^0^</iframe>
snippet_picture=picture>\n\t<source media="(min-width: 465px)" srcset="^1file^-small.jpg" />\n\t<source media="(min-width: 650px)" srcset="^1file^-medium.jpg" />\n\t<img src="^1file^.jpg" alt="^0^" />\n</picture>
snippet_region=<!-- #region name -->\n<!-- #endregion -->
snippet_select=select>\n\t<option value="^1value^">^2text^</option>\n</select>
snippet_table=table>\n\t<tr>\n\t\t<td>^0^</td>\n\t</tr>\n</table>
snippet_ul=ul>\n\t<li>^0^</li>\n</ul>\n

[JavaScript]
snippet_do=do {\n\t^0^\n} while(^1true^);
snippet_find=^1array^.find((^2element^) => {\n\t ^3^});
snippet_findindex=^1array^.findIndex((^2element^) => {\n\t ^3^});
snippet_flatmap=^1array^.flatMap((^2element^) => {\n\t ^3^});
snippet_foreach=^1:array^.forEach((^2^}) => {\n\t ^3^});
snippet_isnil=typeof ^1value^ === 'undefined' || ^1value^ === null
snippet_map=^1array^.map((^2element^) => {\n\t ^3^});
snippet_reduce=^1array^.reduce((^2accumulator^, ^3currentValue^) => {\n\t ^4^});
snippet_reduceright=^1array^.reduceRight((^2accumulator^, ^3currentValue^) => {\n\t ^4^});
snippet_some=^1array^.some((^2element^) => {\n\t ^3^});
snippet_while=while (^1true^) {\n\t^0^\n}
snippet_alert=alert(^1content^);
snippet_case=case ^1condition^:\n\t^0^break;\n
snippet_catch=catch (^1ex^) {\n\t^0^\n}
snippet_const=const ^1variable^ = ^2value^;^0^
snippet_default=default:\n\t^0^break;
snippet_else=else {\n\t^0^\n}
snippet_for=for (var ^1i^ = 0; ^1i^ < ^2count^; ++^1i^) {\n\t^0^\n}
snippet_forin=for (var ^1variable^ in ^2object^) {\n\t^0^\n}
snippet_forof=for (^3var^ ^1variable^ of ^2collection^) {\n\t^0^\n}
snippet_function=function ^1name^(^2parameters^) {\n\t^0^\n}
snippet_if=if (^1condition^) {\n\t^0^\n}
snippet_instanceof=instanceof
snippet_let=let ^1name^ = ^2^;^0^
snippet_switch=switch (^1variable^) {\n\tcase ^2condition^:\n\t\t^0^break;\n}
snippet_try=try {\n\t^0^\n}\ncatch (^1ex^) {\n}
snippet_typeof=typeof(^0^)
snippet_var=var ^1name^ = ^2^;^0^
